// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: codygateway.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CodyGatewayService_GetCodyGatewayAccess_FullMethodName    = "/enterpriseportal.codygateway.v1.CodyGatewayService/GetCodyGatewayAccess"
	CodyGatewayService_ListCodyGatewayAccesses_FullMethodName = "/enterpriseportal.codygateway.v1.CodyGatewayService/ListCodyGatewayAccesses"
)

// CodyGatewayServiceClient is the client API for CodyGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodyGatewayServiceClient interface {
	// Retrieve Cody Gateway access granted to an Enterprise subscription.
	GetCodyGatewayAccess(ctx context.Context, in *GetCodyGatewayAccessRequest, opts ...grpc.CallOption) (*CodyGatewayAccess, error)
	// List all Cody Gateway accesses granted to any Enterprise subscription.
	ListCodyGatewayAccesses(ctx context.Context, in *ListCodyGatewayAccessesRequest, opts ...grpc.CallOption) (*ListCodyGatewayAccessesResponse, error)
}

type codyGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCodyGatewayServiceClient(cc grpc.ClientConnInterface) CodyGatewayServiceClient {
	return &codyGatewayServiceClient{cc}
}

func (c *codyGatewayServiceClient) GetCodyGatewayAccess(ctx context.Context, in *GetCodyGatewayAccessRequest, opts ...grpc.CallOption) (*CodyGatewayAccess, error) {
	out := new(CodyGatewayAccess)
	err := c.cc.Invoke(ctx, CodyGatewayService_GetCodyGatewayAccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codyGatewayServiceClient) ListCodyGatewayAccesses(ctx context.Context, in *ListCodyGatewayAccessesRequest, opts ...grpc.CallOption) (*ListCodyGatewayAccessesResponse, error) {
	out := new(ListCodyGatewayAccessesResponse)
	err := c.cc.Invoke(ctx, CodyGatewayService_ListCodyGatewayAccesses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodyGatewayServiceServer is the server API for CodyGatewayService service.
// All implementations must embed UnimplementedCodyGatewayServiceServer
// for forward compatibility
type CodyGatewayServiceServer interface {
	// Retrieve Cody Gateway access granted to an Enterprise subscription.
	GetCodyGatewayAccess(context.Context, *GetCodyGatewayAccessRequest) (*CodyGatewayAccess, error)
	// List all Cody Gateway accesses granted to any Enterprise subscription.
	ListCodyGatewayAccesses(context.Context, *ListCodyGatewayAccessesRequest) (*ListCodyGatewayAccessesResponse, error)
	mustEmbedUnimplementedCodyGatewayServiceServer()
}

// UnimplementedCodyGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCodyGatewayServiceServer struct {
}

func (UnimplementedCodyGatewayServiceServer) GetCodyGatewayAccess(context.Context, *GetCodyGatewayAccessRequest) (*CodyGatewayAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodyGatewayAccess not implemented")
}
func (UnimplementedCodyGatewayServiceServer) ListCodyGatewayAccesses(context.Context, *ListCodyGatewayAccessesRequest) (*ListCodyGatewayAccessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCodyGatewayAccesses not implemented")
}
func (UnimplementedCodyGatewayServiceServer) mustEmbedUnimplementedCodyGatewayServiceServer() {}

// UnsafeCodyGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodyGatewayServiceServer will
// result in compilation errors.
type UnsafeCodyGatewayServiceServer interface {
	mustEmbedUnimplementedCodyGatewayServiceServer()
}

func RegisterCodyGatewayServiceServer(s grpc.ServiceRegistrar, srv CodyGatewayServiceServer) {
	s.RegisterService(&CodyGatewayService_ServiceDesc, srv)
}

func _CodyGatewayService_GetCodyGatewayAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodyGatewayAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodyGatewayServiceServer).GetCodyGatewayAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodyGatewayService_GetCodyGatewayAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodyGatewayServiceServer).GetCodyGatewayAccess(ctx, req.(*GetCodyGatewayAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodyGatewayService_ListCodyGatewayAccesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCodyGatewayAccessesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodyGatewayServiceServer).ListCodyGatewayAccesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodyGatewayService_ListCodyGatewayAccesses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodyGatewayServiceServer).ListCodyGatewayAccesses(ctx, req.(*ListCodyGatewayAccessesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CodyGatewayService_ServiceDesc is the grpc.ServiceDesc for CodyGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodyGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enterpriseportal.codygateway.v1.CodyGatewayService",
	HandlerType: (*CodyGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCodyGatewayAccess",
			Handler:    _CodyGatewayService_GetCodyGatewayAccess_Handler,
		},
		{
			MethodName: "ListCodyGatewayAccesses",
			Handler:    _CodyGatewayService_ListCodyGatewayAccesses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "codygateway.proto",
}
