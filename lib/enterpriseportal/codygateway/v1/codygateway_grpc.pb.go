// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: codygateway.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EnterprisePortalCodyGatewayService_GetCodyGatewayAccess_FullMethodName    = "/enterpriseportal.codygateway.v1.EnterprisePortalCodyGatewayService/GetCodyGatewayAccess"
	EnterprisePortalCodyGatewayService_ListCodyGatewayAccesses_FullMethodName = "/enterpriseportal.codygateway.v1.EnterprisePortalCodyGatewayService/ListCodyGatewayAccesses"
)

// EnterprisePortalCodyGatewayServiceClient is the client API for EnterprisePortalCodyGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnterprisePortalCodyGatewayServiceClient interface {
	// Retrieve Cody Gateway access granted to an Enterprise subscription.
	//
	// For classic licenses, properties may be inferred from the active license,
	// or be defined in overrides.
	GetCodyGatewayAccess(ctx context.Context, in *GetCodyGatewayAccessRequest, opts ...grpc.CallOption) (*CodyGatewayAccess, error)
	// List all Cody Gateway access granted to any Enterprise subscription.
	ListCodyGatewayAccesses(ctx context.Context, in *ListCodyGatewayAccessesRequest, opts ...grpc.CallOption) (*ListCodyGatewayAccessesResponse, error)
}

type enterprisePortalCodyGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnterprisePortalCodyGatewayServiceClient(cc grpc.ClientConnInterface) EnterprisePortalCodyGatewayServiceClient {
	return &enterprisePortalCodyGatewayServiceClient{cc}
}

func (c *enterprisePortalCodyGatewayServiceClient) GetCodyGatewayAccess(ctx context.Context, in *GetCodyGatewayAccessRequest, opts ...grpc.CallOption) (*CodyGatewayAccess, error) {
	out := new(CodyGatewayAccess)
	err := c.cc.Invoke(ctx, EnterprisePortalCodyGatewayService_GetCodyGatewayAccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterprisePortalCodyGatewayServiceClient) ListCodyGatewayAccesses(ctx context.Context, in *ListCodyGatewayAccessesRequest, opts ...grpc.CallOption) (*ListCodyGatewayAccessesResponse, error) {
	out := new(ListCodyGatewayAccessesResponse)
	err := c.cc.Invoke(ctx, EnterprisePortalCodyGatewayService_ListCodyGatewayAccesses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnterprisePortalCodyGatewayServiceServer is the server API for EnterprisePortalCodyGatewayService service.
// All implementations must embed UnimplementedEnterprisePortalCodyGatewayServiceServer
// for forward compatibility
type EnterprisePortalCodyGatewayServiceServer interface {
	// Retrieve Cody Gateway access granted to an Enterprise subscription.
	//
	// For classic licenses, properties may be inferred from the active license,
	// or be defined in overrides.
	GetCodyGatewayAccess(context.Context, *GetCodyGatewayAccessRequest) (*CodyGatewayAccess, error)
	// List all Cody Gateway access granted to any Enterprise subscription.
	ListCodyGatewayAccesses(context.Context, *ListCodyGatewayAccessesRequest) (*ListCodyGatewayAccessesResponse, error)
	mustEmbedUnimplementedEnterprisePortalCodyGatewayServiceServer()
}

// UnimplementedEnterprisePortalCodyGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnterprisePortalCodyGatewayServiceServer struct {
}

func (UnimplementedEnterprisePortalCodyGatewayServiceServer) GetCodyGatewayAccess(context.Context, *GetCodyGatewayAccessRequest) (*CodyGatewayAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodyGatewayAccess not implemented")
}
func (UnimplementedEnterprisePortalCodyGatewayServiceServer) ListCodyGatewayAccesses(context.Context, *ListCodyGatewayAccessesRequest) (*ListCodyGatewayAccessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCodyGatewayAccesses not implemented")
}
func (UnimplementedEnterprisePortalCodyGatewayServiceServer) mustEmbedUnimplementedEnterprisePortalCodyGatewayServiceServer() {
}

// UnsafeEnterprisePortalCodyGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnterprisePortalCodyGatewayServiceServer will
// result in compilation errors.
type UnsafeEnterprisePortalCodyGatewayServiceServer interface {
	mustEmbedUnimplementedEnterprisePortalCodyGatewayServiceServer()
}

func RegisterEnterprisePortalCodyGatewayServiceServer(s grpc.ServiceRegistrar, srv EnterprisePortalCodyGatewayServiceServer) {
	s.RegisterService(&EnterprisePortalCodyGatewayService_ServiceDesc, srv)
}

func _EnterprisePortalCodyGatewayService_GetCodyGatewayAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodyGatewayAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterprisePortalCodyGatewayServiceServer).GetCodyGatewayAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnterprisePortalCodyGatewayService_GetCodyGatewayAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterprisePortalCodyGatewayServiceServer).GetCodyGatewayAccess(ctx, req.(*GetCodyGatewayAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterprisePortalCodyGatewayService_ListCodyGatewayAccesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCodyGatewayAccessesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterprisePortalCodyGatewayServiceServer).ListCodyGatewayAccesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnterprisePortalCodyGatewayService_ListCodyGatewayAccesses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterprisePortalCodyGatewayServiceServer).ListCodyGatewayAccesses(ctx, req.(*ListCodyGatewayAccessesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnterprisePortalCodyGatewayService_ServiceDesc is the grpc.ServiceDesc for EnterprisePortalCodyGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnterprisePortalCodyGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enterpriseportal.codygateway.v1.EnterprisePortalCodyGatewayService",
	HandlerType: (*EnterprisePortalCodyGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCodyGatewayAccess",
			Handler:    _EnterprisePortalCodyGatewayService_GetCodyGatewayAccess_Handler,
		},
		{
			MethodName: "ListCodyGatewayAccesses",
			Handler:    _EnterprisePortalCodyGatewayService_ListCodyGatewayAccesses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "codygateway.proto",
}
