// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: codygateway.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/sourcegraph/sourcegraph/lib/enterpriseportal/codygateway/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EnterprisePortalCodyGatewayServiceName is the fully-qualified name of the
	// EnterprisePortalCodyGatewayService service.
	EnterprisePortalCodyGatewayServiceName = "enterpriseportal.codygateway.v1.EnterprisePortalCodyGatewayService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EnterprisePortalCodyGatewayServiceGetCodyGatewayAccessProcedure is the fully-qualified name of
	// the EnterprisePortalCodyGatewayService's GetCodyGatewayAccess RPC.
	EnterprisePortalCodyGatewayServiceGetCodyGatewayAccessProcedure = "/enterpriseportal.codygateway.v1.EnterprisePortalCodyGatewayService/GetCodyGatewayAccess"
	// EnterprisePortalCodyGatewayServiceListCodyGatewayAccessesProcedure is the fully-qualified name of
	// the EnterprisePortalCodyGatewayService's ListCodyGatewayAccesses RPC.
	EnterprisePortalCodyGatewayServiceListCodyGatewayAccessesProcedure = "/enterpriseportal.codygateway.v1.EnterprisePortalCodyGatewayService/ListCodyGatewayAccesses"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	enterprisePortalCodyGatewayServiceServiceDescriptor                       = v1.File_codygateway_proto.Services().ByName("EnterprisePortalCodyGatewayService")
	enterprisePortalCodyGatewayServiceGetCodyGatewayAccessMethodDescriptor    = enterprisePortalCodyGatewayServiceServiceDescriptor.Methods().ByName("GetCodyGatewayAccess")
	enterprisePortalCodyGatewayServiceListCodyGatewayAccessesMethodDescriptor = enterprisePortalCodyGatewayServiceServiceDescriptor.Methods().ByName("ListCodyGatewayAccesses")
)

// EnterprisePortalCodyGatewayServiceClient is a client for the
// enterpriseportal.codygateway.v1.EnterprisePortalCodyGatewayService service.
type EnterprisePortalCodyGatewayServiceClient interface {
	// Retrieve Cody Gateway access granted to an Enterprise subscription.
	//
	// For classic licenses, properties may be inferred from the active license,
	// or be defined in overrides.
	GetCodyGatewayAccess(context.Context, *connect.Request[v1.GetCodyGatewayAccessRequest]) (*connect.Response[v1.CodyGatewayAccess], error)
	// List all Cody Gateway access granted to any Enterprise subscription.
	ListCodyGatewayAccesses(context.Context, *connect.Request[v1.ListCodyGatewayAccessesRequest]) (*connect.Response[v1.ListCodyGatewayAccessesResponse], error)
}

// NewEnterprisePortalCodyGatewayServiceClient constructs a client for the
// enterpriseportal.codygateway.v1.EnterprisePortalCodyGatewayService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEnterprisePortalCodyGatewayServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EnterprisePortalCodyGatewayServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &enterprisePortalCodyGatewayServiceClient{
		getCodyGatewayAccess: connect.NewClient[v1.GetCodyGatewayAccessRequest, v1.CodyGatewayAccess](
			httpClient,
			baseURL+EnterprisePortalCodyGatewayServiceGetCodyGatewayAccessProcedure,
			connect.WithSchema(enterprisePortalCodyGatewayServiceGetCodyGatewayAccessMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listCodyGatewayAccesses: connect.NewClient[v1.ListCodyGatewayAccessesRequest, v1.ListCodyGatewayAccessesResponse](
			httpClient,
			baseURL+EnterprisePortalCodyGatewayServiceListCodyGatewayAccessesProcedure,
			connect.WithSchema(enterprisePortalCodyGatewayServiceListCodyGatewayAccessesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// enterprisePortalCodyGatewayServiceClient implements EnterprisePortalCodyGatewayServiceClient.
type enterprisePortalCodyGatewayServiceClient struct {
	getCodyGatewayAccess    *connect.Client[v1.GetCodyGatewayAccessRequest, v1.CodyGatewayAccess]
	listCodyGatewayAccesses *connect.Client[v1.ListCodyGatewayAccessesRequest, v1.ListCodyGatewayAccessesResponse]
}

// GetCodyGatewayAccess calls
// enterpriseportal.codygateway.v1.EnterprisePortalCodyGatewayService.GetCodyGatewayAccess.
func (c *enterprisePortalCodyGatewayServiceClient) GetCodyGatewayAccess(ctx context.Context, req *connect.Request[v1.GetCodyGatewayAccessRequest]) (*connect.Response[v1.CodyGatewayAccess], error) {
	return c.getCodyGatewayAccess.CallUnary(ctx, req)
}

// ListCodyGatewayAccesses calls
// enterpriseportal.codygateway.v1.EnterprisePortalCodyGatewayService.ListCodyGatewayAccesses.
func (c *enterprisePortalCodyGatewayServiceClient) ListCodyGatewayAccesses(ctx context.Context, req *connect.Request[v1.ListCodyGatewayAccessesRequest]) (*connect.Response[v1.ListCodyGatewayAccessesResponse], error) {
	return c.listCodyGatewayAccesses.CallUnary(ctx, req)
}

// EnterprisePortalCodyGatewayServiceHandler is an implementation of the
// enterpriseportal.codygateway.v1.EnterprisePortalCodyGatewayService service.
type EnterprisePortalCodyGatewayServiceHandler interface {
	// Retrieve Cody Gateway access granted to an Enterprise subscription.
	//
	// For classic licenses, properties may be inferred from the active license,
	// or be defined in overrides.
	GetCodyGatewayAccess(context.Context, *connect.Request[v1.GetCodyGatewayAccessRequest]) (*connect.Response[v1.CodyGatewayAccess], error)
	// List all Cody Gateway access granted to any Enterprise subscription.
	ListCodyGatewayAccesses(context.Context, *connect.Request[v1.ListCodyGatewayAccessesRequest]) (*connect.Response[v1.ListCodyGatewayAccessesResponse], error)
}

// NewEnterprisePortalCodyGatewayServiceHandler builds an HTTP handler from the service
// implementation. It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEnterprisePortalCodyGatewayServiceHandler(svc EnterprisePortalCodyGatewayServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	enterprisePortalCodyGatewayServiceGetCodyGatewayAccessHandler := connect.NewUnaryHandler(
		EnterprisePortalCodyGatewayServiceGetCodyGatewayAccessProcedure,
		svc.GetCodyGatewayAccess,
		connect.WithSchema(enterprisePortalCodyGatewayServiceGetCodyGatewayAccessMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	enterprisePortalCodyGatewayServiceListCodyGatewayAccessesHandler := connect.NewUnaryHandler(
		EnterprisePortalCodyGatewayServiceListCodyGatewayAccessesProcedure,
		svc.ListCodyGatewayAccesses,
		connect.WithSchema(enterprisePortalCodyGatewayServiceListCodyGatewayAccessesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/enterpriseportal.codygateway.v1.EnterprisePortalCodyGatewayService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EnterprisePortalCodyGatewayServiceGetCodyGatewayAccessProcedure:
			enterprisePortalCodyGatewayServiceGetCodyGatewayAccessHandler.ServeHTTP(w, r)
		case EnterprisePortalCodyGatewayServiceListCodyGatewayAccessesProcedure:
			enterprisePortalCodyGatewayServiceListCodyGatewayAccessesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEnterprisePortalCodyGatewayServiceHandler returns CodeUnimplemented from all
// methods.
type UnimplementedEnterprisePortalCodyGatewayServiceHandler struct{}

func (UnimplementedEnterprisePortalCodyGatewayServiceHandler) GetCodyGatewayAccess(context.Context, *connect.Request[v1.GetCodyGatewayAccessRequest]) (*connect.Response[v1.CodyGatewayAccess], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("enterpriseportal.codygateway.v1.EnterprisePortalCodyGatewayService.GetCodyGatewayAccess is not implemented"))
}

func (UnimplementedEnterprisePortalCodyGatewayServiceHandler) ListCodyGatewayAccesses(context.Context, *connect.Request[v1.ListCodyGatewayAccessesRequest]) (*connect.Response[v1.ListCodyGatewayAccessesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("enterpriseportal.codygateway.v1.EnterprisePortalCodyGatewayService.ListCodyGatewayAccesses is not implemented"))
}
