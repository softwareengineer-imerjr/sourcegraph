// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        (unknown)
// source: subscriptions.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnterpriseSubscriptionConditionEvent int32

const (
	EnterpriseSubscriptionConditionEvent_ENTERPRISE_SUBSCRIPTION_CONDITION_EVENT_UNSPECIFIED EnterpriseSubscriptionConditionEvent = 0
	// License creation event.
	EnterpriseSubscriptionConditionEvent_ENTERPRISE_SUBSCRIPTION_CONDITION_EVENT_CREATED EnterpriseSubscriptionConditionEvent = 1
	// License archival event. i.e. 'is_archived'
	EnterpriseSubscriptionConditionEvent_ENTERPRISE_SUBSCRIPTION_CONDITION_EVENT_ARCHIVED EnterpriseSubscriptionConditionEvent = 2
)

// Enum value maps for EnterpriseSubscriptionConditionEvent.
var (
	EnterpriseSubscriptionConditionEvent_name = map[int32]string{
		0: "ENTERPRISE_SUBSCRIPTION_CONDITION_EVENT_UNSPECIFIED",
		1: "ENTERPRISE_SUBSCRIPTION_CONDITION_EVENT_CREATED",
		2: "ENTERPRISE_SUBSCRIPTION_CONDITION_EVENT_ARCHIVED",
	}
	EnterpriseSubscriptionConditionEvent_value = map[string]int32{
		"ENTERPRISE_SUBSCRIPTION_CONDITION_EVENT_UNSPECIFIED": 0,
		"ENTERPRISE_SUBSCRIPTION_CONDITION_EVENT_CREATED":     1,
		"ENTERPRISE_SUBSCRIPTION_CONDITION_EVENT_ARCHIVED":    2,
	}
)

func (x EnterpriseSubscriptionConditionEvent) Enum() *EnterpriseSubscriptionConditionEvent {
	p := new(EnterpriseSubscriptionConditionEvent)
	*p = x
	return p
}

func (x EnterpriseSubscriptionConditionEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnterpriseSubscriptionConditionEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_subscriptions_proto_enumTypes[0].Descriptor()
}

func (EnterpriseSubscriptionConditionEvent) Type() protoreflect.EnumType {
	return &file_subscriptions_proto_enumTypes[0]
}

func (x EnterpriseSubscriptionConditionEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnterpriseSubscriptionConditionEvent.Descriptor instead.
func (EnterpriseSubscriptionConditionEvent) EnumDescriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{0}
}

type EnterpriseSubscriptionLicenseConditionEvent int32

const (
	EnterpriseSubscriptionLicenseConditionEvent_ENTERPRISE_SUBSCRIPTION_LICENSE_CONDITION_EVENT_UNSPECIFIED EnterpriseSubscriptionLicenseConditionEvent = 0
	// License creation event.
	EnterpriseSubscriptionLicenseConditionEvent_ENTERPRISE_SUBSCRIPTION_LICENSE_CONDITION_EVENT_CREATED EnterpriseSubscriptionLicenseConditionEvent = 1
	// License archival event. i.e. 'is_archived'
	EnterpriseSubscriptionLicenseConditionEvent_ENTERPRISE_SUBSCRIPTION_LICENSE_CONDITION_EVENT_ARCHIVED EnterpriseSubscriptionLicenseConditionEvent = 2
	// License revocation event, i.e. 'is_revoked'
	EnterpriseSubscriptionLicenseConditionEvent_ENTERPRISE_SUBSCRIPTION_LICENSE_CONDITION_EVENT_REVOKED EnterpriseSubscriptionLicenseConditionEvent = 3
)

// Enum value maps for EnterpriseSubscriptionLicenseConditionEvent.
var (
	EnterpriseSubscriptionLicenseConditionEvent_name = map[int32]string{
		0: "ENTERPRISE_SUBSCRIPTION_LICENSE_CONDITION_EVENT_UNSPECIFIED",
		1: "ENTERPRISE_SUBSCRIPTION_LICENSE_CONDITION_EVENT_CREATED",
		2: "ENTERPRISE_SUBSCRIPTION_LICENSE_CONDITION_EVENT_ARCHIVED",
		3: "ENTERPRISE_SUBSCRIPTION_LICENSE_CONDITION_EVENT_REVOKED",
	}
	EnterpriseSubscriptionLicenseConditionEvent_value = map[string]int32{
		"ENTERPRISE_SUBSCRIPTION_LICENSE_CONDITION_EVENT_UNSPECIFIED": 0,
		"ENTERPRISE_SUBSCRIPTION_LICENSE_CONDITION_EVENT_CREATED":     1,
		"ENTERPRISE_SUBSCRIPTION_LICENSE_CONDITION_EVENT_ARCHIVED":    2,
		"ENTERPRISE_SUBSCRIPTION_LICENSE_CONDITION_EVENT_REVOKED":     3,
	}
)

func (x EnterpriseSubscriptionLicenseConditionEvent) Enum() *EnterpriseSubscriptionLicenseConditionEvent {
	p := new(EnterpriseSubscriptionLicenseConditionEvent)
	*p = x
	return p
}

func (x EnterpriseSubscriptionLicenseConditionEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnterpriseSubscriptionLicenseConditionEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_subscriptions_proto_enumTypes[1].Descriptor()
}

func (EnterpriseSubscriptionLicenseConditionEvent) Type() protoreflect.EnumType {
	return &file_subscriptions_proto_enumTypes[1]
}

func (x EnterpriseSubscriptionLicenseConditionEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnterpriseSubscriptionLicenseConditionEvent.Descriptor instead.
func (EnterpriseSubscriptionLicenseConditionEvent) EnumDescriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{1}
}

// EnterpriseSubscriptionLicenseType can be used to denote different types of
// licenses.
type EnterpriseSubscriptionLicenseType int32

const (
	EnterpriseSubscriptionLicenseType_ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_UNSPECIFIED EnterpriseSubscriptionLicenseType = 0
	// This license type is the classic licensing mechanism that Sourcegraph has
	// always had. Each Subscription is expected to have at most one active
	// Sourcegraph classic license used by a Sourcegraph instance at a time.
	EnterpriseSubscriptionLicenseType_ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_CLASSIC EnterpriseSubscriptionLicenseType = 1
)

// Enum value maps for EnterpriseSubscriptionLicenseType.
var (
	EnterpriseSubscriptionLicenseType_name = map[int32]string{
		0: "ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_UNSPECIFIED",
		1: "ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_CLASSIC",
	}
	EnterpriseSubscriptionLicenseType_value = map[string]int32{
		"ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_UNSPECIFIED": 0,
		"ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_CLASSIC":     1,
	}
)

func (x EnterpriseSubscriptionLicenseType) Enum() *EnterpriseSubscriptionLicenseType {
	p := new(EnterpriseSubscriptionLicenseType)
	*p = x
	return p
}

func (x EnterpriseSubscriptionLicenseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnterpriseSubscriptionLicenseType) Descriptor() protoreflect.EnumDescriptor {
	return file_subscriptions_proto_enumTypes[2].Descriptor()
}

func (EnterpriseSubscriptionLicenseType) Type() protoreflect.EnumType {
	return &file_subscriptions_proto_enumTypes[2]
}

func (x EnterpriseSubscriptionLicenseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnterpriseSubscriptionLicenseType.Descriptor instead.
func (EnterpriseSubscriptionLicenseType) EnumDescriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{2}
}

type EnterpriseSubscriptionCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time this condition was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Event is the type of event corresponding to this condition.
	Event EnterpriseSubscriptionConditionEvent `protobuf:"varint,2,opt,name=event,proto3,enum=enterpriseportal.subscriptions.v1.EnterpriseSubscriptionConditionEvent" json:"event,omitempty"`
	// Message is a description of the condition and why it happened.
	Message *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *EnterpriseSubscriptionCondition) Reset() {
	*x = EnterpriseSubscriptionCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseSubscriptionCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseSubscriptionCondition) ProtoMessage() {}

func (x *EnterpriseSubscriptionCondition) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseSubscriptionCondition.ProtoReflect.Descriptor instead.
func (*EnterpriseSubscriptionCondition) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{0}
}

func (x *EnterpriseSubscriptionCondition) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *EnterpriseSubscriptionCondition) GetEvent() EnterpriseSubscriptionConditionEvent {
	if x != nil {
		return x.Event
	}
	return EnterpriseSubscriptionConditionEvent_ENTERPRISE_SUBSCRIPTION_CONDITION_EVENT_UNSPECIFIED
}

func (x *EnterpriseSubscriptionCondition) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// EnterpriseSubscription represents a Sourcegraph Enterprise subscription.
// It is one of the fundamental elements of the Enterprise Portal service.
type EnterpriseSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the external, prefixed UUID-format identifier for this subscription.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timeline of key events corresponding to this subscription.
	Conditions []*EnterpriseSubscriptionCondition `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// Display name of this subscription. This is not guaranteed to be unique.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *EnterpriseSubscription) Reset() {
	*x = EnterpriseSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseSubscription) ProtoMessage() {}

func (x *EnterpriseSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseSubscription.ProtoReflect.Descriptor instead.
func (*EnterpriseSubscription) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{1}
}

func (x *EnterpriseSubscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EnterpriseSubscription) GetConditions() []*EnterpriseSubscriptionCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *EnterpriseSubscription) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

// EnterpriseSubscriptionLicenseClassic corresponds to
// ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_CLASSIC.
type EnterpriseSubscriptionLicenseClassic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of this classic license's information schema.
	InfoVersion int32 `protobuf:"varint,1,opt,name=info_version,json=infoVersion,proto3" json:"info_version,omitempty"`
	// Information embedded into the license key.
	Info *EnterpriseSubscriptionLicenseClassic_Info `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	// The license key.
	LicenseKey string `protobuf:"bytes,3,opt,name=license_key,json=licenseKey,proto3" json:"license_key,omitempty"`
	// UUID of the known instance using this license key, self-reported from
	// online license checks. Also known as 'site ID'.
	InstanceId string `protobuf:"bytes,4,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *EnterpriseSubscriptionLicenseClassic) Reset() {
	*x = EnterpriseSubscriptionLicenseClassic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseSubscriptionLicenseClassic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseSubscriptionLicenseClassic) ProtoMessage() {}

func (x *EnterpriseSubscriptionLicenseClassic) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseSubscriptionLicenseClassic.ProtoReflect.Descriptor instead.
func (*EnterpriseSubscriptionLicenseClassic) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{2}
}

func (x *EnterpriseSubscriptionLicenseClassic) GetInfoVersion() int32 {
	if x != nil {
		return x.InfoVersion
	}
	return 0
}

func (x *EnterpriseSubscriptionLicenseClassic) GetInfo() *EnterpriseSubscriptionLicenseClassic_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *EnterpriseSubscriptionLicenseClassic) GetLicenseKey() string {
	if x != nil {
		return x.LicenseKey
	}
	return ""
}

func (x *EnterpriseSubscriptionLicenseClassic) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type EnterpriseSubscriptionLicenseCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time this condition was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Event is the type of event corresponding to this condition.
	Event EnterpriseSubscriptionLicenseConditionEvent `protobuf:"varint,2,opt,name=event,proto3,enum=enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseConditionEvent" json:"event,omitempty"`
	// Message is a description of the condition and why it happened.
	Message *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *EnterpriseSubscriptionLicenseCondition) Reset() {
	*x = EnterpriseSubscriptionLicenseCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseSubscriptionLicenseCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseSubscriptionLicenseCondition) ProtoMessage() {}

func (x *EnterpriseSubscriptionLicenseCondition) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseSubscriptionLicenseCondition.ProtoReflect.Descriptor instead.
func (*EnterpriseSubscriptionLicenseCondition) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{3}
}

func (x *EnterpriseSubscriptionLicenseCondition) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *EnterpriseSubscriptionLicenseCondition) GetEvent() EnterpriseSubscriptionLicenseConditionEvent {
	if x != nil {
		return x.Event
	}
	return EnterpriseSubscriptionLicenseConditionEvent_ENTERPRISE_SUBSCRIPTION_LICENSE_CONDITION_EVENT_UNSPECIFIED
}

func (x *EnterpriseSubscriptionLicenseCondition) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// EnterpriseSubscriptionLicense represents a license for a Sourcegraph
// Enterprise subscription. It is one of the fundamental elements of the
// Enterprise Portal service.
type EnterpriseSubscriptionLicense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the external, prefixed UUID-format identifier for this license key.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The external, prefixed UUID-format identifier for the subscription that
	// owns this license.
	SubscriptionId string `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	// Timeline of key events corresponding to this license.
	Conditions []*EnterpriseSubscriptionLicenseCondition `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// License data, based on the type of the license.
	//
	// Types that are assignable to License:
	//
	//	*EnterpriseSubscriptionLicense_Classic
	License isEnterpriseSubscriptionLicense_License `protobuf_oneof:"license"`
}

func (x *EnterpriseSubscriptionLicense) Reset() {
	*x = EnterpriseSubscriptionLicense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseSubscriptionLicense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseSubscriptionLicense) ProtoMessage() {}

func (x *EnterpriseSubscriptionLicense) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseSubscriptionLicense.ProtoReflect.Descriptor instead.
func (*EnterpriseSubscriptionLicense) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{4}
}

func (x *EnterpriseSubscriptionLicense) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EnterpriseSubscriptionLicense) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *EnterpriseSubscriptionLicense) GetConditions() []*EnterpriseSubscriptionLicenseCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (m *EnterpriseSubscriptionLicense) GetLicense() isEnterpriseSubscriptionLicense_License {
	if m != nil {
		return m.License
	}
	return nil
}

func (x *EnterpriseSubscriptionLicense) GetClassic() *EnterpriseSubscriptionLicenseClassic {
	if x, ok := x.GetLicense().(*EnterpriseSubscriptionLicense_Classic); ok {
		return x.Classic
	}
	return nil
}

type isEnterpriseSubscriptionLicense_License interface {
	isEnterpriseSubscriptionLicense_License()
}

type EnterpriseSubscriptionLicense_Classic struct {
	Classic *EnterpriseSubscriptionLicenseClassic `protobuf:"bytes,4,opt,name=classic,proto3,oneof"`
}

func (*EnterpriseSubscriptionLicense_Classic) isEnterpriseSubscriptionLicense_License() {}

type GetEnterpriseSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query specifies the lookup strategy for this get request.
	//
	// Types that are assignable to Query:
	//
	//	*GetEnterpriseSubscriptionRequest_Id
	Query isGetEnterpriseSubscriptionRequest_Query `protobuf_oneof:"query"`
}

func (x *GetEnterpriseSubscriptionRequest) Reset() {
	*x = GetEnterpriseSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnterpriseSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnterpriseSubscriptionRequest) ProtoMessage() {}

func (x *GetEnterpriseSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnterpriseSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GetEnterpriseSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{5}
}

func (m *GetEnterpriseSubscriptionRequest) GetQuery() isGetEnterpriseSubscriptionRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *GetEnterpriseSubscriptionRequest) GetId() string {
	if x, ok := x.GetQuery().(*GetEnterpriseSubscriptionRequest_Id); ok {
		return x.Id
	}
	return ""
}

type isGetEnterpriseSubscriptionRequest_Query interface {
	isGetEnterpriseSubscriptionRequest_Query()
}

type GetEnterpriseSubscriptionRequest_Id struct {
	// Look up a subscription using its external, prefixed UUID-format identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

func (*GetEnterpriseSubscriptionRequest_Id) isGetEnterpriseSubscriptionRequest_Query() {}

type ListEnterpriseSubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Clients use this field to specify the maximum number of results to be
	// returned by the server. The server may further constrain the maximum number
	// of results returned in a single page. If the page_size is 0, the server
	// will decide the number of results to be returned.
	//
	// See pagination concepts from https://cloud.google.com/apis/design/design_patterns#list_pagination
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The client uses this field to request a specific page of the list results.
	//
	// See pagination concepts from https://cloud.google.com/apis/design/design_patterns#list_pagination
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListEnterpriseSubscriptionsRequest) Reset() {
	*x = ListEnterpriseSubscriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnterpriseSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnterpriseSubscriptionsRequest) ProtoMessage() {}

func (x *ListEnterpriseSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnterpriseSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*ListEnterpriseSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{6}
}

func (x *ListEnterpriseSubscriptionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEnterpriseSubscriptionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListEnterpriseSubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field represents the pagination token to retrieve the next page of
	// results. If the value is "", it means no further results for the request.
	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The list of subscriptions that matched the given query.
	Subscriptions []*EnterpriseSubscription `protobuf:"bytes,2,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *ListEnterpriseSubscriptionsResponse) Reset() {
	*x = ListEnterpriseSubscriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnterpriseSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnterpriseSubscriptionsResponse) ProtoMessage() {}

func (x *ListEnterpriseSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnterpriseSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*ListEnterpriseSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{7}
}

func (x *ListEnterpriseSubscriptionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListEnterpriseSubscriptionsResponse) GetSubscriptions() []*EnterpriseSubscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type ListEnterpriseSubscriptionLicensesFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*ListEnterpriseSubscriptionLicensesFilter_SubscriptionId
	//	*ListEnterpriseSubscriptionLicensesFilter_Type
	//	*ListEnterpriseSubscriptionLicensesFilter_IsArchived
	//	*ListEnterpriseSubscriptionLicensesFilter_LicenseKeySubstring
	Filter isListEnterpriseSubscriptionLicensesFilter_Filter `protobuf_oneof:"filter"`
}

func (x *ListEnterpriseSubscriptionLicensesFilter) Reset() {
	*x = ListEnterpriseSubscriptionLicensesFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnterpriseSubscriptionLicensesFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnterpriseSubscriptionLicensesFilter) ProtoMessage() {}

func (x *ListEnterpriseSubscriptionLicensesFilter) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnterpriseSubscriptionLicensesFilter.ProtoReflect.Descriptor instead.
func (*ListEnterpriseSubscriptionLicensesFilter) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{8}
}

func (m *ListEnterpriseSubscriptionLicensesFilter) GetFilter() isListEnterpriseSubscriptionLicensesFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *ListEnterpriseSubscriptionLicensesFilter) GetSubscriptionId() string {
	if x, ok := x.GetFilter().(*ListEnterpriseSubscriptionLicensesFilter_SubscriptionId); ok {
		return x.SubscriptionId
	}
	return ""
}

func (x *ListEnterpriseSubscriptionLicensesFilter) GetType() EnterpriseSubscriptionLicenseType {
	if x, ok := x.GetFilter().(*ListEnterpriseSubscriptionLicensesFilter_Type); ok {
		return x.Type
	}
	return EnterpriseSubscriptionLicenseType_ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_UNSPECIFIED
}

func (x *ListEnterpriseSubscriptionLicensesFilter) GetIsArchived() bool {
	if x, ok := x.GetFilter().(*ListEnterpriseSubscriptionLicensesFilter_IsArchived); ok {
		return x.IsArchived
	}
	return false
}

func (x *ListEnterpriseSubscriptionLicensesFilter) GetLicenseKeySubstring() string {
	if x, ok := x.GetFilter().(*ListEnterpriseSubscriptionLicensesFilter_LicenseKeySubstring); ok {
		return x.LicenseKeySubstring
	}
	return ""
}

type isListEnterpriseSubscriptionLicensesFilter_Filter interface {
	isListEnterpriseSubscriptionLicensesFilter_Filter()
}

type ListEnterpriseSubscriptionLicensesFilter_SubscriptionId struct {
	// Return only licenses corresponding to the given subscription ID, with the
	// most recently issued licenses first.
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3,oneof"`
}

type ListEnterpriseSubscriptionLicensesFilter_Type struct {
	// Return only licenses of the given type.
	Type EnterpriseSubscriptionLicenseType `protobuf:"varint,2,opt,name=type,proto3,enum=enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseType,oneof"`
}

type ListEnterpriseSubscriptionLicensesFilter_IsArchived struct {
	// Return only licenses with the given archival status.
	IsArchived bool `protobuf:"varint,3,opt,name=is_archived,json=isArchived,proto3,oneof"`
}

type ListEnterpriseSubscriptionLicensesFilter_LicenseKeySubstring struct {
	// Return only product subscriptions whose license key contains this
	// substring.
	LicenseKeySubstring string `protobuf:"bytes,4,opt,name=license_key_substring,json=licenseKeySubstring,proto3,oneof"`
}

func (*ListEnterpriseSubscriptionLicensesFilter_SubscriptionId) isListEnterpriseSubscriptionLicensesFilter_Filter() {
}

func (*ListEnterpriseSubscriptionLicensesFilter_Type) isListEnterpriseSubscriptionLicensesFilter_Filter() {
}

func (*ListEnterpriseSubscriptionLicensesFilter_IsArchived) isListEnterpriseSubscriptionLicensesFilter_Filter() {
}

func (*ListEnterpriseSubscriptionLicensesFilter_LicenseKeySubstring) isListEnterpriseSubscriptionLicensesFilter_Filter() {
}

type ListEnterpriseSubscriptionLicensesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Clients use this field to specify the maximum number of results to be
	// returned by the server. The server may further constrain the maximum number
	// of results returned in a single page. If the page_size is 0, the server
	// will decide the number of results to be returned.
	//
	// See pagination concepts from https://cloud.google.com/apis/design/design_patterns#list_pagination
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The client uses this field to request a specific page of the list results.
	// A zero value requests the first page.
	//
	// See pagination concepts from https://cloud.google.com/apis/design/design_patterns#list_pagination
	//
	// TODO: Create an internal pagination token type: https://protobuf.dev/programming-guides/api/#encode-opaque-data-in-strings
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Filters define the lookup strategy for this list request. Multiple filters
	// are treated as AND-concatenated.
	Filters []*ListEnterpriseSubscriptionLicensesFilter `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListEnterpriseSubscriptionLicensesRequest) Reset() {
	*x = ListEnterpriseSubscriptionLicensesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnterpriseSubscriptionLicensesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnterpriseSubscriptionLicensesRequest) ProtoMessage() {}

func (x *ListEnterpriseSubscriptionLicensesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnterpriseSubscriptionLicensesRequest.ProtoReflect.Descriptor instead.
func (*ListEnterpriseSubscriptionLicensesRequest) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{9}
}

func (x *ListEnterpriseSubscriptionLicensesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEnterpriseSubscriptionLicensesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListEnterpriseSubscriptionLicensesRequest) GetFilters() []*ListEnterpriseSubscriptionLicensesFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListEnterpriseSubscriptionLicensesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field represents the pagination token to retrieve the next page of
	// results. If the value is "", it means no further results for the request.
	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The list of licenses that matched the given query.
	Licenses []*EnterpriseSubscriptionLicense `protobuf:"bytes,2,rep,name=licenses,proto3" json:"licenses,omitempty"`
}

func (x *ListEnterpriseSubscriptionLicensesResponse) Reset() {
	*x = ListEnterpriseSubscriptionLicensesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnterpriseSubscriptionLicensesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnterpriseSubscriptionLicensesResponse) ProtoMessage() {}

func (x *ListEnterpriseSubscriptionLicensesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnterpriseSubscriptionLicensesResponse.ProtoReflect.Descriptor instead.
func (*ListEnterpriseSubscriptionLicensesResponse) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{10}
}

func (x *ListEnterpriseSubscriptionLicensesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListEnterpriseSubscriptionLicensesResponse) GetLicenses() []*EnterpriseSubscriptionLicense {
	if x != nil {
		return x.Licenses
	}
	return nil
}

type EnterpriseSubscriptionLicenseClassic_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tags that indicate which features are activated by this license.
	Tags []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	// The number of users for which this product subscription is valid.
	UserCount uint64 `protobuf:"varint,2,opt,name=user_count,json=userCount,proto3" json:"user_count,omitempty"`
	// The expiration date of this product license. In license data, this is
	// called 'expires_at', expressed as the number of seconds since the epoch.
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// The Salesforce subscription ID associated with this product license.
	SalesforceSubscriptionId string `protobuf:"bytes,4,opt,name=salesforce_subscription_id,json=salesforceSubscriptionId,proto3" json:"salesforce_subscription_id,omitempty"`
	// The Salesforce opportunity ID associated with this product license.
	SalesforceOpportunityId string `protobuf:"bytes,5,opt,name=salesforce_opportunity_id,json=salesforceOpportunityId,proto3" json:"salesforce_opportunity_id,omitempty"`
}

func (x *EnterpriseSubscriptionLicenseClassic_Info) Reset() {
	*x = EnterpriseSubscriptionLicenseClassic_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseSubscriptionLicenseClassic_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseSubscriptionLicenseClassic_Info) ProtoMessage() {}

func (x *EnterpriseSubscriptionLicenseClassic_Info) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseSubscriptionLicenseClassic_Info.ProtoReflect.Descriptor instead.
func (*EnterpriseSubscriptionLicenseClassic_Info) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{2, 0}
}

func (x *EnterpriseSubscriptionLicenseClassic_Info) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *EnterpriseSubscriptionLicenseClassic_Info) GetUserCount() uint64 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

func (x *EnterpriseSubscriptionLicenseClassic_Info) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *EnterpriseSubscriptionLicenseClassic_Info) GetSalesforceSubscriptionId() string {
	if x != nil {
		return x.SalesforceSubscriptionId
	}
	return ""
}

func (x *EnterpriseSubscriptionLicenseClassic_Info) GetSalesforceOpportunityId() string {
	if x != nil {
		return x.SalesforceOpportunityId
	}
	return ""
}

var File_subscriptions_proto protoreflect.FileDescriptor

var file_subscriptions_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x01, 0x0a, 0x1f, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x16, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x62, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe0, 0x03, 0x0a, 0x24, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4c, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x1a, 0xf0, 0x01, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3c, 0x0a, 0x1a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x19, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xf6, 0x01, 0x0a, 0x26, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x64, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x4e, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x1d, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x69, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x49, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x63, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x42, 0x09, 0x0a,
	0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x60, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xae, 0x01, 0x0a, 0x23, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5f, 0x0a, 0x0d, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x28, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x5a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x44, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x34, 0x0a, 0x15, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x13, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0xce, 0x01, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x65, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x2a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5c, 0x0a, 0x08, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2a, 0xca, 0x01, 0x0a, 0x24, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x37, 0x0a, 0x33, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x2f, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x34,
	0x0a, 0x30, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0xa6, 0x02, 0x0a, 0x2b, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x3b, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49,
	0x53, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3b, 0x0a, 0x37, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52,
	0x49, 0x53, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x3c, 0x0a, 0x38, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45,
	0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49,
	0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x3b, 0x0a, 0x37, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x43, 0x45,
	0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x8b, 0x01,
	0x0a, 0x21, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x30, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53,
	0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x10, 0x01, 0x32, 0xb6, 0x04, 0x0a, 0x14,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0xb1, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46,
	0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0xc6, 0x01, 0x0a, 0x22,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x12, 0x4c, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x4d, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x03, 0x90, 0x02, 0x01, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_subscriptions_proto_rawDescOnce sync.Once
	file_subscriptions_proto_rawDescData = file_subscriptions_proto_rawDesc
)

func file_subscriptions_proto_rawDescGZIP() []byte {
	file_subscriptions_proto_rawDescOnce.Do(func() {
		file_subscriptions_proto_rawDescData = protoimpl.X.CompressGZIP(file_subscriptions_proto_rawDescData)
	})
	return file_subscriptions_proto_rawDescData
}

var file_subscriptions_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_subscriptions_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_subscriptions_proto_goTypes = []interface{}{
	(EnterpriseSubscriptionConditionEvent)(0),          // 0: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionConditionEvent
	(EnterpriseSubscriptionLicenseConditionEvent)(0),   // 1: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseConditionEvent
	(EnterpriseSubscriptionLicenseType)(0),             // 2: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseType
	(*EnterpriseSubscriptionCondition)(nil),            // 3: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionCondition
	(*EnterpriseSubscription)(nil),                     // 4: enterpriseportal.subscriptions.v1.EnterpriseSubscription
	(*EnterpriseSubscriptionLicenseClassic)(nil),       // 5: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseClassic
	(*EnterpriseSubscriptionLicenseCondition)(nil),     // 6: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseCondition
	(*EnterpriseSubscriptionLicense)(nil),              // 7: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicense
	(*GetEnterpriseSubscriptionRequest)(nil),           // 8: enterpriseportal.subscriptions.v1.GetEnterpriseSubscriptionRequest
	(*ListEnterpriseSubscriptionsRequest)(nil),         // 9: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsRequest
	(*ListEnterpriseSubscriptionsResponse)(nil),        // 10: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsResponse
	(*ListEnterpriseSubscriptionLicensesFilter)(nil),   // 11: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesFilter
	(*ListEnterpriseSubscriptionLicensesRequest)(nil),  // 12: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesRequest
	(*ListEnterpriseSubscriptionLicensesResponse)(nil), // 13: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesResponse
	(*EnterpriseSubscriptionLicenseClassic_Info)(nil),  // 14: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseClassic.Info
	(*timestamppb.Timestamp)(nil),                      // 15: google.protobuf.Timestamp
}
var file_subscriptions_proto_depIdxs = []int32{
	15, // 0: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionCondition.create_time:type_name -> google.protobuf.Timestamp
	0,  // 1: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionCondition.event:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscriptionConditionEvent
	3,  // 2: enterpriseportal.subscriptions.v1.EnterpriseSubscription.conditions:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscriptionCondition
	14, // 3: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseClassic.info:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseClassic.Info
	15, // 4: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseCondition.create_time:type_name -> google.protobuf.Timestamp
	1,  // 5: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseCondition.event:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseConditionEvent
	6,  // 6: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicense.conditions:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseCondition
	5,  // 7: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicense.classic:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseClassic
	4,  // 8: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsResponse.subscriptions:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscription
	2,  // 9: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesFilter.type:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseType
	11, // 10: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesRequest.filters:type_name -> enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesFilter
	7,  // 11: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesResponse.licenses:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicense
	15, // 12: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseClassic.Info.expire_time:type_name -> google.protobuf.Timestamp
	8,  // 13: enterpriseportal.subscriptions.v1.SubscriptionsService.GetEnterpriseSubscription:input_type -> enterpriseportal.subscriptions.v1.GetEnterpriseSubscriptionRequest
	9,  // 14: enterpriseportal.subscriptions.v1.SubscriptionsService.ListEnterpriseSubscriptions:input_type -> enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsRequest
	12, // 15: enterpriseportal.subscriptions.v1.SubscriptionsService.ListEnterpriseSubscriptionLicenses:input_type -> enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesRequest
	4,  // 16: enterpriseportal.subscriptions.v1.SubscriptionsService.GetEnterpriseSubscription:output_type -> enterpriseportal.subscriptions.v1.EnterpriseSubscription
	10, // 17: enterpriseportal.subscriptions.v1.SubscriptionsService.ListEnterpriseSubscriptions:output_type -> enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsResponse
	13, // 18: enterpriseportal.subscriptions.v1.SubscriptionsService.ListEnterpriseSubscriptionLicenses:output_type -> enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesResponse
	16, // [16:19] is the sub-list for method output_type
	13, // [13:16] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_subscriptions_proto_init() }
func file_subscriptions_proto_init() {
	if File_subscriptions_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_subscriptions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseSubscriptionCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseSubscriptionLicenseClassic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseSubscriptionLicenseCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseSubscriptionLicense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnterpriseSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnterpriseSubscriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnterpriseSubscriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnterpriseSubscriptionLicensesFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnterpriseSubscriptionLicensesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnterpriseSubscriptionLicensesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseSubscriptionLicenseClassic_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_subscriptions_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_subscriptions_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_subscriptions_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*EnterpriseSubscriptionLicense_Classic)(nil),
	}
	file_subscriptions_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*GetEnterpriseSubscriptionRequest_Id)(nil),
	}
	file_subscriptions_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ListEnterpriseSubscriptionLicensesFilter_SubscriptionId)(nil),
		(*ListEnterpriseSubscriptionLicensesFilter_Type)(nil),
		(*ListEnterpriseSubscriptionLicensesFilter_IsArchived)(nil),
		(*ListEnterpriseSubscriptionLicensesFilter_LicenseKeySubstring)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_subscriptions_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_subscriptions_proto_goTypes,
		DependencyIndexes: file_subscriptions_proto_depIdxs,
		EnumInfos:         file_subscriptions_proto_enumTypes,
		MessageInfos:      file_subscriptions_proto_msgTypes,
	}.Build()
	File_subscriptions_proto = out.File
	file_subscriptions_proto_rawDesc = nil
	file_subscriptions_proto_goTypes = nil
	file_subscriptions_proto_depIdxs = nil
}
