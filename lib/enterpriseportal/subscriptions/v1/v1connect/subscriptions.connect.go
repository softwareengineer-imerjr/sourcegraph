// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: subscriptions.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/sourcegraph/sourcegraph/lib/enterpriseportal/subscriptions/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EnterprisePortalSubscriptionsServiceName is the fully-qualified name of the
	// EnterprisePortalSubscriptionsService service.
	EnterprisePortalSubscriptionsServiceName = "enterpriseportal.subscriptions.v1.EnterprisePortalSubscriptionsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EnterprisePortalSubscriptionsServiceGetEnterpriseSubscriptionProcedure is the fully-qualified
	// name of the EnterprisePortalSubscriptionsService's GetEnterpriseSubscription RPC.
	EnterprisePortalSubscriptionsServiceGetEnterpriseSubscriptionProcedure = "/enterpriseportal.subscriptions.v1.EnterprisePortalSubscriptionsService/GetEnterpriseSubscription"
	// EnterprisePortalSubscriptionsServiceListEnterpriseSubscriptionsProcedure is the fully-qualified
	// name of the EnterprisePortalSubscriptionsService's ListEnterpriseSubscriptions RPC.
	EnterprisePortalSubscriptionsServiceListEnterpriseSubscriptionsProcedure = "/enterpriseportal.subscriptions.v1.EnterprisePortalSubscriptionsService/ListEnterpriseSubscriptions"
	// EnterprisePortalSubscriptionsServiceListEnterpriseSubscriptionLicensesProcedure is the
	// fully-qualified name of the EnterprisePortalSubscriptionsService's
	// ListEnterpriseSubscriptionLicenses RPC.
	EnterprisePortalSubscriptionsServiceListEnterpriseSubscriptionLicensesProcedure = "/enterpriseportal.subscriptions.v1.EnterprisePortalSubscriptionsService/ListEnterpriseSubscriptionLicenses"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	enterprisePortalSubscriptionsServiceServiceDescriptor                                  = v1.File_subscriptions_proto.Services().ByName("EnterprisePortalSubscriptionsService")
	enterprisePortalSubscriptionsServiceGetEnterpriseSubscriptionMethodDescriptor          = enterprisePortalSubscriptionsServiceServiceDescriptor.Methods().ByName("GetEnterpriseSubscription")
	enterprisePortalSubscriptionsServiceListEnterpriseSubscriptionsMethodDescriptor        = enterprisePortalSubscriptionsServiceServiceDescriptor.Methods().ByName("ListEnterpriseSubscriptions")
	enterprisePortalSubscriptionsServiceListEnterpriseSubscriptionLicensesMethodDescriptor = enterprisePortalSubscriptionsServiceServiceDescriptor.Methods().ByName("ListEnterpriseSubscriptionLicenses")
)

// EnterprisePortalSubscriptionsServiceClient is a client for the
// enterpriseportal.subscriptions.v1.EnterprisePortalSubscriptionsService service.
type EnterprisePortalSubscriptionsServiceClient interface {
	// GetSubscription retrieves an exact match on an Enterprise subscription.
	GetEnterpriseSubscription(context.Context, *connect.Request[v1.GetEnterpriseSubscriptionRequest]) (*connect.Response[v1.EnterpriseSubscription], error)
	// ListEnterpriseSubscriptions queries for Enterprise subscriptions.
	ListEnterpriseSubscriptions(context.Context, *connect.Request[v1.ListEnterpriseSubscriptionsRequest]) (*connect.Response[v1.ListEnterpriseSubscriptionsResponse], error)
	// ListEnterpriseSubscriptionLicenses queries for Enterprise subscription licenses.
	ListEnterpriseSubscriptionLicenses(context.Context, *connect.Request[v1.ListEnterpriseSubscriptionLicensesRequest]) (*connect.Response[v1.ListEnterpriseSubscriptionLicensesResponse], error)
}

// NewEnterprisePortalSubscriptionsServiceClient constructs a client for the
// enterpriseportal.subscriptions.v1.EnterprisePortalSubscriptionsService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEnterprisePortalSubscriptionsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EnterprisePortalSubscriptionsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &enterprisePortalSubscriptionsServiceClient{
		getEnterpriseSubscription: connect.NewClient[v1.GetEnterpriseSubscriptionRequest, v1.EnterpriseSubscription](
			httpClient,
			baseURL+EnterprisePortalSubscriptionsServiceGetEnterpriseSubscriptionProcedure,
			connect.WithSchema(enterprisePortalSubscriptionsServiceGetEnterpriseSubscriptionMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listEnterpriseSubscriptions: connect.NewClient[v1.ListEnterpriseSubscriptionsRequest, v1.ListEnterpriseSubscriptionsResponse](
			httpClient,
			baseURL+EnterprisePortalSubscriptionsServiceListEnterpriseSubscriptionsProcedure,
			connect.WithSchema(enterprisePortalSubscriptionsServiceListEnterpriseSubscriptionsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listEnterpriseSubscriptionLicenses: connect.NewClient[v1.ListEnterpriseSubscriptionLicensesRequest, v1.ListEnterpriseSubscriptionLicensesResponse](
			httpClient,
			baseURL+EnterprisePortalSubscriptionsServiceListEnterpriseSubscriptionLicensesProcedure,
			connect.WithSchema(enterprisePortalSubscriptionsServiceListEnterpriseSubscriptionLicensesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// enterprisePortalSubscriptionsServiceClient implements EnterprisePortalSubscriptionsServiceClient.
type enterprisePortalSubscriptionsServiceClient struct {
	getEnterpriseSubscription          *connect.Client[v1.GetEnterpriseSubscriptionRequest, v1.EnterpriseSubscription]
	listEnterpriseSubscriptions        *connect.Client[v1.ListEnterpriseSubscriptionsRequest, v1.ListEnterpriseSubscriptionsResponse]
	listEnterpriseSubscriptionLicenses *connect.Client[v1.ListEnterpriseSubscriptionLicensesRequest, v1.ListEnterpriseSubscriptionLicensesResponse]
}

// GetEnterpriseSubscription calls
// enterpriseportal.subscriptions.v1.EnterprisePortalSubscriptionsService.GetEnterpriseSubscription.
func (c *enterprisePortalSubscriptionsServiceClient) GetEnterpriseSubscription(ctx context.Context, req *connect.Request[v1.GetEnterpriseSubscriptionRequest]) (*connect.Response[v1.EnterpriseSubscription], error) {
	return c.getEnterpriseSubscription.CallUnary(ctx, req)
}

// ListEnterpriseSubscriptions calls
// enterpriseportal.subscriptions.v1.EnterprisePortalSubscriptionsService.ListEnterpriseSubscriptions.
func (c *enterprisePortalSubscriptionsServiceClient) ListEnterpriseSubscriptions(ctx context.Context, req *connect.Request[v1.ListEnterpriseSubscriptionsRequest]) (*connect.Response[v1.ListEnterpriseSubscriptionsResponse], error) {
	return c.listEnterpriseSubscriptions.CallUnary(ctx, req)
}

// ListEnterpriseSubscriptionLicenses calls
// enterpriseportal.subscriptions.v1.EnterprisePortalSubscriptionsService.ListEnterpriseSubscriptionLicenses.
func (c *enterprisePortalSubscriptionsServiceClient) ListEnterpriseSubscriptionLicenses(ctx context.Context, req *connect.Request[v1.ListEnterpriseSubscriptionLicensesRequest]) (*connect.Response[v1.ListEnterpriseSubscriptionLicensesResponse], error) {
	return c.listEnterpriseSubscriptionLicenses.CallUnary(ctx, req)
}

// EnterprisePortalSubscriptionsServiceHandler is an implementation of the
// enterpriseportal.subscriptions.v1.EnterprisePortalSubscriptionsService service.
type EnterprisePortalSubscriptionsServiceHandler interface {
	// GetSubscription retrieves an exact match on an Enterprise subscription.
	GetEnterpriseSubscription(context.Context, *connect.Request[v1.GetEnterpriseSubscriptionRequest]) (*connect.Response[v1.EnterpriseSubscription], error)
	// ListEnterpriseSubscriptions queries for Enterprise subscriptions.
	ListEnterpriseSubscriptions(context.Context, *connect.Request[v1.ListEnterpriseSubscriptionsRequest]) (*connect.Response[v1.ListEnterpriseSubscriptionsResponse], error)
	// ListEnterpriseSubscriptionLicenses queries for Enterprise subscription licenses.
	ListEnterpriseSubscriptionLicenses(context.Context, *connect.Request[v1.ListEnterpriseSubscriptionLicensesRequest]) (*connect.Response[v1.ListEnterpriseSubscriptionLicensesResponse], error)
}

// NewEnterprisePortalSubscriptionsServiceHandler builds an HTTP handler from the service
// implementation. It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEnterprisePortalSubscriptionsServiceHandler(svc EnterprisePortalSubscriptionsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	enterprisePortalSubscriptionsServiceGetEnterpriseSubscriptionHandler := connect.NewUnaryHandler(
		EnterprisePortalSubscriptionsServiceGetEnterpriseSubscriptionProcedure,
		svc.GetEnterpriseSubscription,
		connect.WithSchema(enterprisePortalSubscriptionsServiceGetEnterpriseSubscriptionMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	enterprisePortalSubscriptionsServiceListEnterpriseSubscriptionsHandler := connect.NewUnaryHandler(
		EnterprisePortalSubscriptionsServiceListEnterpriseSubscriptionsProcedure,
		svc.ListEnterpriseSubscriptions,
		connect.WithSchema(enterprisePortalSubscriptionsServiceListEnterpriseSubscriptionsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	enterprisePortalSubscriptionsServiceListEnterpriseSubscriptionLicensesHandler := connect.NewUnaryHandler(
		EnterprisePortalSubscriptionsServiceListEnterpriseSubscriptionLicensesProcedure,
		svc.ListEnterpriseSubscriptionLicenses,
		connect.WithSchema(enterprisePortalSubscriptionsServiceListEnterpriseSubscriptionLicensesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/enterpriseportal.subscriptions.v1.EnterprisePortalSubscriptionsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EnterprisePortalSubscriptionsServiceGetEnterpriseSubscriptionProcedure:
			enterprisePortalSubscriptionsServiceGetEnterpriseSubscriptionHandler.ServeHTTP(w, r)
		case EnterprisePortalSubscriptionsServiceListEnterpriseSubscriptionsProcedure:
			enterprisePortalSubscriptionsServiceListEnterpriseSubscriptionsHandler.ServeHTTP(w, r)
		case EnterprisePortalSubscriptionsServiceListEnterpriseSubscriptionLicensesProcedure:
			enterprisePortalSubscriptionsServiceListEnterpriseSubscriptionLicensesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEnterprisePortalSubscriptionsServiceHandler returns CodeUnimplemented from all
// methods.
type UnimplementedEnterprisePortalSubscriptionsServiceHandler struct{}

func (UnimplementedEnterprisePortalSubscriptionsServiceHandler) GetEnterpriseSubscription(context.Context, *connect.Request[v1.GetEnterpriseSubscriptionRequest]) (*connect.Response[v1.EnterpriseSubscription], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("enterpriseportal.subscriptions.v1.EnterprisePortalSubscriptionsService.GetEnterpriseSubscription is not implemented"))
}

func (UnimplementedEnterprisePortalSubscriptionsServiceHandler) ListEnterpriseSubscriptions(context.Context, *connect.Request[v1.ListEnterpriseSubscriptionsRequest]) (*connect.Response[v1.ListEnterpriseSubscriptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("enterpriseportal.subscriptions.v1.EnterprisePortalSubscriptionsService.ListEnterpriseSubscriptions is not implemented"))
}

func (UnimplementedEnterprisePortalSubscriptionsServiceHandler) ListEnterpriseSubscriptionLicenses(context.Context, *connect.Request[v1.ListEnterpriseSubscriptionLicensesRequest]) (*connect.Response[v1.ListEnterpriseSubscriptionLicensesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("enterpriseportal.subscriptions.v1.EnterprisePortalSubscriptionsService.ListEnterpriseSubscriptionLicenses is not implemented"))
}
